meta2016-Challenger(20140330)


library(rjson) 
library(tm) 
library(RCurl) 
library(SnowballC) 

###Set working dir path 
setwd("D:/meta2016")
file_1<-"talks_music.json"
file_2<-"talks_art.json"
file_3<-"talks_free.json"
file_4<-"talks_time.json"



###Read a json file to workspace 
talks_music<-fromJSON(file = file_1,method = "C")
talks_art<-fromJSON(file = file_2,method = "C")
talks_free<-fromJSON(file = file_3,method = "C")
talks_time<-fromJSON(file = file_4,method = "C")
all_json<-c(talks_music,talks_art,talks_free,talks_time)
str(all_json)

talk_names<-names(talks_music$talks[[1]]$talk) 
talk_names

###Convertobject type 
talks_music<-lapply(talks_music$talks, function(x){unlist(x)}) 
talks_art<-lapply(talks_art$talks, function(x){unlist(x)}) 
talks_free<-lapply(talks_free$talks, function(x){unlist(x)}) 
talks_time<-lapply(talks_time$talks, function(x){unlist(x)}) 
all_json<-lapply(c(talks_music$talks,talks_art$talks,talks_free$talks,talks_time$talks), function(x){unlist(x)})
str(all_json)

df_talk_all<-data.frame()
df_talk_all<-do.call("rbind",c(df_talk_all,talks_music,talks_art,talks_free,talks_time))
str(df_talk_all)
df_talk_all<-data.frame(df_talk_all)
str(df_talk_all)


###Chage datatype of talk description 
df_talk_all$talk.description<-as.character(df_talk_all$talk.description) 
str(df_talk_all$talk.description) 


###Change names of variables 
names(df_talk_all)<-talk_names 
str(df_talk_all) 


#####Term Clustering 

###Convert object type 
class(df_talk_all$description) 

ted_docs <- Corpus(VectorSource(df_talk_all$description)) 
class(ted_docs) 

###Pre-processing 
ted_docs <- tm_map(ted_docs, tolower) 
ted_docs <- tm_map(ted_docs, removeNumbers) 
ted_docs <- tm_map(ted_docs, removePunctuation) 
ted_docs <- tm_map(ted_docs, removeWords, "ted") 
ted_docs <- tm_map(ted_docs, removeWords, stopwords("SMART")) 

###Tokenizing 
strsplit_space_tokenizer <- function(x) 
  unlist(strsplit(as.character(x), "[[:space:]]+")) 
 
token_docs<-(sapply(ted_docs$content, strsplit_space_tokenizer)) 
token_freq<-table(unlist(token_docs)) 
summary(data.frame(token_freq)$Freq) 

###Stemming 
stem_docs <- sapply(token_docs, stemDocument) 
stem_freq<-table(unlist(stem_docs)) 
summary(data.frame(stem_freq)$Freq) 

df_stem_freq<-data.frame(stem_freq) 
str(df_stem_freq) 


###Term-Doc Matrix with Stemming 
class(stem_docs) 
stem_docs <- Corpus(VectorSource(stem_docs)) 
class(stem_docs) 

###term weight: TfIDF 
ted_tdm <- TermDocumentMatrix(stem_docs, 
                              control = list(removePunctuation = TRUE, 
                                             weighting=weightTfIdf, 
                                             stopwords = TRUE)) 

inspect(ted_tdm[1,]) 


#####Hierachical Clustering: Term Clustering 
###Remove sparse terms 
ted_tdm_sparse <- removeSparseTerms(ted_tdm, sparse =0.94) 
ted_tdm_sparse$nrow 
ted_tdm<-ted_tdm_sparse 

###Convert to matrix 
ted_m <- as.matrix(ted_tdm) 

###Calculate similarity 
###dist {stats} Distance Matrix Computation 
###scale {base} Scaling and Centering of Matrix-like Objects 
distMatrix<- dist(scale(ted_m)) 

###Execute hierarchial clustering 
###hclust {stats} Hierarchical Clustering 
###method=c("single", complete", "average", "mcquitty", "median, "centroid", "ward.D", "ward.D2) 
fit <- hclust(distMatrix, method="average") 

###Draw dendrogram 
plot(fit) 
###rect.hclust {stats} Draw Rectangles Around Hierarchical Clusters 
###k = number of clusters 
rect.hclust(fit, k=5) 

###Save the dendrogram as PNG image file 
png("./average's dendrogram.png", width = 1200, height=600) 
plot(fit) 
###k= number of clusters 
rect.hclust(fit, k=5) 
dev.off() 

###Assign a cluster to a term 
###cutree {stats} Cut a Tree into Groups of Data 
###k= number of clusters 
groups <- cutree(fit, k=5) 
df_groups <- data.frame(groups) 
str(df_groups) 
df_groups$KWD <- rownames(df_groups) 
str(df_groups) 

###Write the clustering result to text file 
write.table(df_groups, "./tc_result.txt", row.names=FALSE, col.names=TRUE, sep="\t") 
